workflow:
  rules:
    # for pushes direct to master
    - if: $CI_MERGE_REQUEST_IID && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"
    # for running manually through the Pipelines page
    - if: $CI_PIPELINE_SOURCE == "web" && $PIPELINE_BRANCH_TYPE

stages:
  - format
  - build
  - test
  - setup
  - regression
  - eval
  - clean

variables:
  GIT_STRATEGY: clone
  GIT_CLEAN_FLAGS: none
  GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_REF_NAME/$CI_COMMIT_SHORT_SHA
  MVP_PATH: /opt/mvapich/2.3.7/rinode
  MVP_RUN: $MVP_PATH/bin/mpirun_rsh

before_script:
  - source .gitlab/ci/setup.sh

format-job:
  stage: format
  tags:
    - omb
  script:
    - maint/omb-format.pl --check
  variables:
    GIT_STRATEGY: fetch

build-job:
  stage: build
  script:
    - source build.sh
  tags:
    - omb


# Regression helpers:
# These are stages run either before or after primary regressions
regression-setup-job:
  stage: setup
  timeout: 2h
  tags:
    - omb
  script:
    - source setupRegressions.sh
  variables:
    GIT_STRATEGY: fetch

eval-job:
  stage: eval
  timeout: 3h
  script:
    - echo "Evaluating $SLUG"
    - cd $REG_WORK_DIR
    - pwd
    - bash evalRegressions.sh pt2pt-inter pt2pt-intra-intrasock  pt2pt-intra-intersock pt2pt-inter 1-nodes 2-nodes
    - echo "All done"
    - mv $PWD/*.html $CI_PROJECT_DIR
  tags:
    - omb
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/*.html
      - $CI_PROJECT_DIR/slurm-*.out
  variables:
    GIT_STRATEGY: fetch

Clean-Dir:
  stage: clean
  variables:
    GIT_CHECKOUT: "false"
  tags:
    - omb
  before_script: []
  when: always
  script:
    - rm -rf $CI_BUILDS_DIR/$CI_COMMIT_REF_NAME/$CI_COMMIT_SHORT_SHA
    - rm -rf $CI_BUILDS_DIR/$CI_COMMIT_REF_NAME/$CI_COMMIT_SHORT_SHA.tmp
    - rm -rf $BUILD_DIR

# Tests
pt2pt-test-job:
  stage: test
  timeout: 24hr
  tags:
    - omb
  script:
    - paratest.sh -s "standard" -np "2" -ppn "1 2" -d "$PT2PT_PATH" -b "$PT2PT_BENCHMARKS"
    - paratest.sh -s "persistent" -np "2" -ppn "1 2" -d "$PT2PT_PERSISTENT_PATH" -b "$PERSISTENT_BENCHMARKS"
    - ls
    - merge_test_out pt2pt-test-job.out
    - ls
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/pt2pt-test-job.out
  variables:
    GIT_STRATEGY: fetch
    PT2PT_BENCHMARKS: osu_bibw  osu_bw  osu_latency  osu_mbw_mr  osu_multi_lat
    PERSISTENT_BENCHMARKS: osu_bibw_persistent  osu_bw_persistent osu_latency_persistent

collective-test-job:
  stage: test
  timeout: 24hr
  tags:
    - omb
  script:
    - paratest.sh -np "4" -ppn "2 4" -d "$COLLECTIVE_PATH" -b "$BENCHMARKS"
    - merge_test_out collective-test-job.out
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/collective-test-job.out
  variables:
    GIT_STRATEGY: fetch
    BENCHMARKS: osu_allgather osu_gather osu_ibarrier
        osu_ineighbor_alltoallw osu_neighbor_alltoallv osu_allgatherv
        osu_gatherv osu_ibcast osu_ireduce osu_neighbor_alltoallw
        osu_allreduce osu_iallgather osu_igather osu_ireduce_scatter
        osu_reduce osu_alltoall osu_iallgatherv osu_igatherv osu_iscatter
        osu_reduce_scatter osu_alltoallv osu_iallreduce
        osu_ineighbor_allgather osu_iscatterv osu_scatter osu_alltoallw
        osu_ialltoall osu_ineighbor_allgatherv osu_neighbor_allgather
        osu_scatterv osu_barrier osu_ialltoallv osu_ineighbor_alltoall
        osu_neighbor_allgatherv osu_bcast osu_ialltoallw
        osu_ineighbor_alltoallv osu_neighbor_alltoall

one-sided-test-job:
  stage: test
  timeout: 24hr
  tags:
    - omb
  script:
    - paratest.sh -np "2" -ppn "1 2" -d "$ONE_SIDED_PATH" -b "$BENCHMARKS" --exe "testOneSided.sh"
    - merge_test_out one-sided-test-job.out
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/one-sided-test-job.out
  variables:
    GIT_STRATEGY: fetch
    # Excluding osu_fop_latency due to long runtime
    BENCHMARKS: osu_acc_latency osu_get_bw
        osu_put_bibw osu_put_latency osu_cas_latency
        osu_get_acc_latency
        osu_get_latency osu_put_bw

startup-test-job:
  stage: test
  timeout: 24hr
  tags:
    - omb
  script:
    - paratest.sh -np "2" -ppn "1 2" -d "$STARTUP_PATH" -b "$BENCHMARKS"
    - merge_test_out startup-test-job.out
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/startup-test-job.out
  variables:
    GIT_STRATEGY: fetch
    BENCHMARKS: osu_hello osu_init

data-validation-test-job:
  stage: test
  timeout: 24hr
  tags:
    - omb
  script:
    - paratest.sh -s "pt2pt" -np "2" -ppn "1 2" -d "$PT2PT_PATH" -b "$PT2PT_BENCHMARKS"
    - paratest.sh -s "pt2pt2-persistent" -np "2" -ppn "1 2" -d "$PT2PT_PERSISTENT_PATH" -b "$PERSISTENT_BENCHMARKS"
    - paratest.sh -s "collective" -np "4" -ppn "2 4" -d "$COLLECTIVE_PATH" -b "$COLLECTIVE_BENCHMARKS"
    - merge_test_out data-validation-test-job.out
  variables:
    GIT_STRATEGY: fetch
    PT2PT_BENCHMARKS: osu_bibw  osu_bw  osu_latency  osu_mbw_mr  osu_multi_lat
    PERSISTENT_BENCHMARKS: osu_bibw_persistent  osu_bw_persistent osu_latency_persistent
    COLLECTIVE_BENCHMARKS: osu_allgather osu_gather
        osu_ineighbor_alltoallw osu_neighbor_alltoallv osu_allgatherv
        osu_gatherv osu_ibcast osu_ireduce osu_neighbor_alltoallw
        osu_allreduce osu_iallgather osu_igather osu_ireduce_scatter
        osu_reduce osu_alltoall osu_iallgatherv osu_igatherv osu_iscatter
        osu_reduce_scatter osu_alltoallv osu_iallreduce
        osu_ineighbor_allgather osu_iscatterv osu_scatter osu_alltoallw
        osu_ialltoall osu_ineighbor_allgatherv osu_neighbor_allgather
        osu_scatterv osu_ialltoallv osu_ineighbor_alltoall
        osu_neighbor_allgatherv osu_bcast osu_ialltoallw
        osu_ineighbor_alltoallv osu_neighbor_alltoall

ddt-test-job:
  stage: test
  timeout: 24hr
  tags:
    - omb
  script:
    - paratest.sh -s "PT2PT" -np "2" -ppn "1 2" -d "$PT2PT_PATH" -b "$PT2PT_BENCHMARKS" --exe "testDDT.sh"
    - paratest.sh -s "PT2PT-PERSISTENT" -np "2" -ppn "1 2" -d "$PT2PT_PERSISTENT_PATH" -b "$PERSISTENT_BENCHMARKS" --exe "testDDT.sh"
    - paratest.sh -s "COLLECTIVE" -np "4" -ppn "2 4" -d "$COLLECTIVE_PATH" -b "$COLLECTIVE_BENCHMARKS" --exe "testDDT.sh"
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/data-validation-test-job.out
  variables:
    GIT_STRATEGY: fetch
    PT2PT_BENCHMARKS: osu_bibw  osu_bw  osu_latency  osu_mbw_mr  osu_multi_lat
    PERSISTENT_BENCHMARKS: osu_bibw_persistent  osu_bw_persistent osu_latency_persistent
    COLLECTIVE_BENCHMARKS: osu_allgather osu_gather
        osu_ineighbor_alltoallw osu_neighbor_alltoallv osu_allgatherv
        osu_gatherv osu_ibcast osu_neighbor_alltoallw
        osu_iallgather osu_igather osu_alltoall osu_iallgatherv
        osu_igatherv osu_iscatter osu_alltoallv
        osu_ineighbor_allgather osu_iscatterv osu_scatter
        osu_alltoallw osu_ialltoall osu_ineighbor_allgatherv
        osu_neighbor_allgather osu_scatterv osu_ialltoallv
        osu_ineighbor_alltoall osu_neighbor_allgatherv osu_bcast
        osu_ialltoallw
        osu_ineighbor_alltoallv osu_neighbor_alltoall

mpi-types-test-job:
  stage: test
  timeout: 24hr
  tags:
    - omb
  script:
    - paratest.sh -s "PT2PT" -np "2" -ppn "1 2" -d "$PT2PT_PATH" -b "$PT2PT_BENCHMARKS" --exe "testTypes.sh"
    - paratest.sh -s "PT2PT-PERSISTENT" -np "2" -ppn "1 2" -d "$PT2PT_PERSISTENT_PATH" -b "$PERSISTENT_BENCHMARKS" --exe "testTypes.sh"
    - paratest.sh -s "COLLECTIVE" -np "4" -ppn "2 4" -d "$COLLECTIVE_PATH" -b "$COLLECTIVE_BENCHMARKS" --exe "testTypes.sh"
    - merge_test_out mpi-types-test-job.out
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/mpi-types-test-job.out
  variables:
    GIT_STRATEGY: fetch
    MPI_TYPES: all mpi_char mpi_int mpi_float
    PT2PT_BENCHMARKS: osu_bibw  osu_bw  osu_latency  osu_mbw_mr  osu_multi_lat
    PERSISTENT_BENCHMARKS: osu_bibw_persistent  osu_bw_persistent osu_latency_persistent
    COLLECTIVE_BENCHMARKS: osu_allgather osu_gather
        osu_ineighbor_alltoallw osu_neighbor_alltoallv osu_allgatherv
        osu_gatherv osu_ibcast osu_ireduce osu_neighbor_alltoallw
        osu_allreduce osu_iallgather osu_igather osu_ireduce_scatter
        osu_reduce osu_alltoall osu_iallgatherv osu_igatherv osu_iscatter
        osu_reduce_scatter osu_alltoallv osu_iallreduce
        osu_ineighbor_allgather osu_iscatterv osu_scatter osu_alltoallw
        osu_ialltoall osu_ineighbor_allgatherv osu_neighbor_allgather
        osu_scatterv osu_ialltoallv osu_ineighbor_alltoall
        osu_neighbor_allgatherv osu_bcast osu_ialltoallw
        osu_ineighbor_alltoallv osu_neighbor_alltoall

# Regressions:
# Currently using ri
pt2pt-intra-intrasock-regression-job:
  stage: regression
  timeout: 24h
  tags:
    - omb
  script:
    - SLUG="pt2pt-intra-intrasock"
    - echo "Running $SLUG"
    - cd $REG_WORK_DIR
    - sbatch -J pt2pt-intra-intrasock -p ri --exclude=rinode6 -N2 --ntasks-per-node=2 -t 24:00:00 submit.sh $SLUG
    - bash wait.sh $SLUG.txt
    - echo "Completed $SLUG."
    - mv $PWD/slurm-*.out $CI_PROJECT_DIR
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/slurm-*.out
  variables:
    GIT_STRATEGY: fetch

pt2pt-intra-intersock-regression-job:
  stage: regression
  timeout: 24h
  tags:
    - omb
  script:
    - SLUG="pt2pt-intra-intersock"
    - echo "Running $SLUG"
    - cd $REG_WORK_DIR
    - sbatch -J pt2pt-intra-intersock -p ri --exclude=rinode6 -N2 --ntasks-per-node=2 -t 24:00:00 submit.sh $SLUG
    - bash wait.sh $SLUG.txt
    - echo "Completed $SLUG."
    - mv $PWD/slurm-*.out $CI_PROJECT_DIR
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/slurm-*.out
  variables:
    GIT_STRATEGY: fetch

pt2pt-inter-regression-job:
  stage: regression
  timeout: 24h
  tags:
    - omb
  script:
    - SLUG="pt2pt-inter"
    - echo "Running $SLUG"
    - cd $REG_WORK_DIR
    - sbatch -J pt2pt-inter -p ri --exclude=rinode6 -N2 --ntasks-per-node=1 -t 24:00:00 submit.sh $SLUG
    - bash wait.sh $SLUG.txt
    - echo "Completed $SLUG."
    - mv $PWD/slurm-*.out $CI_PROJECT_DIR
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/slurm-*.out
  variables:
    GIT_STRATEGY: fetch

1-nodes-regression-job:
  stage: regression
  timeout: 24h
  tags:
    - omb
  script:
    - SLUG="1-nodes"
    - echo "Running $SLUG"
    - cd $REG_WORK_DIR
    - sbatch -J 1-nodes -p ri --exclude=rinode6 -N2 --ntasks-per-node=2 -t 24:00:00 submit.sh $SLUG
    - bash wait.sh $SLUG.txt
    - echo "Completed $SLUG."
    - mv $PWD/slurm-*.out $CI_PROJECT_DIR
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/slurm-*.out
  variables:
    GIT_STRATEGY: fetch


2-nodes-regression-job:
  stage: regression
  timeout: 24h
  tags:
    - omb
  script:
    - SLUG="2-nodes"
    - echo "Running $SLUG"
    - cd $REG_WORK_DIR
    - sbatch -J $SLUG -p ri --exclude=rinode6 -N2 --ntasks-per-node=2 -t 24:00:00 submit.sh $SLUG
    - bash wait.sh $SLUG.txt
    - echo "Completed $SLUG."
    - mv $PWD/slurm-*.out $CI_PROJECT_DIR
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/slurm-*.out
  variables:
    GIT_STRATEGY: fetch
